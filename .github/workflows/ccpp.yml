name: C/C++ CI

on: [push]

jobs:
  Monterey:
    name: MacOS X Monterey
    runs-on: macos-12
    timeout-minutes: 120

    steps:
      - name: install dependencies
        run: |
          brew --version
          brew cleanup
          brew install coreutils
          brew install zlib
          brew install libtool
          brew install automake
          brew install pkg-config
          brew install pkgconfig
          brew install eigen
          export BUILD_ROOT=$(pwd);

      - name: Checkout
        uses: actions/checkout@v3

      - name: CMake
        run: |
          export PATH=/usr/local/opt/qt5/bin:$PATH
          cmake -DCMAKE_BUILD_TYPE=Release -G "Unix Makefiles" .
      - name: make
        run: cmake --build . -- -j$(nproc)
      - name: package
        run: cmake --build . -- package
      - name: Install
        run: sudo make install

  BigSur:
    name: MacOS X BigSur
    runs-on: macos-11
    timeout-minutes: 120

    steps:
      - name: install dependencies
        run: |
          brew --version
          brew cleanup
          brew install coreutils
          brew install zlib
          brew install libtool
          brew install automake
          brew install libffi
          brew install pkg-config
          brew install pkgconfig
          brew upgrade cmake
          brew install eigen
          export BUILD_ROOT=$(pwd);
      - name: Checkout
        uses: actions/checkout@v3

      - name: CMake
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release -G "Unix Makefiles" .
      - name: make
        run: cmake --build . -- -j $(nproc)
      - name: package
        run: cmake --build . -- package
      - name: Install
        run: sudo make install

  Jammy:
    name: Ubuntu-22.04 Jammy
    runs-on: ubuntu-22.04
    timeout-minutes: 120

    steps:
      - name: install dependencies
        run: |
          sudo apt update;
          sudo apt upgrade;
          sudo apt -y install build-essential;
          sudo apt -y install apt-transport-https ca-certificates gnupg software-properties-common wget ;
          sudo apt -y install ninja-build;
          sudo apt -y install autotools-dev;
          sudo apt -y install libtool;
          sudo apt -y install automake;
          sudo apt -y install pkg-config;
          sudo apt -y install libeigen3-dev;

      - name: Checkout
        uses: actions/checkout@v3

      - name: CMake
        run: cmake -DCMAKE_BUILD_TYPE=Release -G "Ninja" .
      - name: make with Ninja
        run: cmake --build . -- -j $(nproc)
      - name: package
        run: cmake --build . -- package
      - name: Install
        run: sudo ninja install
  Focal:
    name: Ubuntu-20.04 Focal
    runs-on: ubuntu-20.04
    timeout-minutes: 120

    steps:
      - name: install dependencies
        run: |
          sudo apt update;
          sudo apt -y install apt-transport-https ca-certificates gnupg software-properties-common wget ;
          sudo apt -y autoremove cmake-data;
          sudo apt -y remove --purge --auto-remove cmake;
          sudo rm -rf /usr/local/bin/cmake
          version=3.16
          build=2
          mkdir ~/temp
          cd ~/temp
          wget https://cmake.org/files/v$version/cmake-$version.$build-Linux-x86_64.sh
          sudo mkdir /opt/cmake
          sudo sh cmake-$version.$build-Linux-x86_64.sh --prefix=/opt/cmake --skip-license
          sudo ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake
          cmake --version
          sudo apt -y install ninja-build;
          sudo apt -y install autotools-dev;
          sudo apt -y install libtool;
          sudo apt -y install automake;
          sudo apt -y install pkg-config;
          git clone https://gitlab.com/libeigen/eigen.git /tmp/eigen;
          mkdir /tmp/eigen-build;
          cd /tmp/eigen;
          git checkout 3.4;
          cd -;
          cd /tmp/eigen-build;
          cmake . /tmp/eigen;
          make -j4;
          sudo make install;

      - name: Checkout
        uses: actions/checkout@v3
      - name: CMake
        run: cmake -DCMAKE_BUILD_TYPE=Release -G "Ninja" .
      - name: make with Ninja
        run: cmake --build . -- -j $(nproc)
      - name: package
        run: cmake --build . -- package
      - name: Install
        run: sudo ninja install

  ArchLinux:
    runs-on: ubuntu-latest
    container: archlinux:latest
    timeout-minutes: 120
    steps:
      - name: Trust repo directory
        run: |
          pacman -Sy --noconfirm
          pacman -S git --noconfirm
          git config --global --add safe.directory /__w/nelson/nelson
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          pacman -Syu --noconfirm
          pacman -S base-devel --noconfirm
          pacman -S git --noconfirm       
          pacman -S gcc binutils glibc --noconfirm
          pacman -S inetutils --noconfirm
          pacman -S gawk --noconfirm
          pacman -S m4 --noconfirm
          pacman -S pkg-config --noconfirm
          pacman -S cmake --noconfirm
          pacman -S make --noconfirm
          git clone https://gitlab.com/libeigen/eigen.git /tmp/eigen
          mkdir /tmp/eigen-build && cd /tmp/eigen && git checkout 3.4 && cd - && cd /tmp/eigen-build && cmake . /tmp/eigen && make -j4 && make install;
      - name: Trust repo directory
        run: git config --global --add safe.directory /__w/nelson/nelson
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: CMake
        run: cmake -DCMAKE_BUILD_TYPE=Release -G "Unix Makefiles" .
      - name: Make
        run: cmake --build . -- -j $(nproc)
      - name: package
        run: cmake --build . -- package
      - name: Install
        run: sudo make install
  Fedora:
    runs-on: ubuntu-latest
    container: fedora:37
    timeout-minutes: 120

    steps:
      - name: Install dependencies
        run: |
          dnf update -y
          dnf upgrade -y
          dnf install -y which
          dnf install -y hostname
          dnf install -y git
          dnf install -y make
          dnf install -y libtool
          dnf install -y gcc
          dnf install -y gcc-c++
          dnf install -y autoconf
          dnf install -y automake
          dnf install -y pkg-config
          dnf install -y cmake
          dnf install -y eigen3-devel
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: CMake
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release -G "Unix Makefiles" .
      - name: Make
        run: |
          cmake --build . -- -j $(nproc)
      - name: package
        run: cmake --build . -- package
      - name: Install
        run: sudo make install

  Windows_win32:
    name: Windows 32 bits
    runs-on: windows-2022
    defaults:
      run:
        shell: cmd
    timeout-minutes: 120

    steps:
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1.3

      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          cd ..
          git clone https://github.com/Nelson-numerical-software/nelson-thirdparty-win32.git
          cd nelson-thirdparty-win32
          install.bat
          cd ..

      - name: Build nelson-kernel
        run: |
          SET PATH=C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\current\Bin\;%PATH%
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x86
          cd nelson-kernel
          msbuild NelSon.sln /p:Configuration=Release /p:Platform=win32 /target:"NelSon-cli" /m:4 /p:PreferredToolArchitecture=x64

  Windows_win64:
    name: Windows 64 bits
    runs-on: windows-2022
    defaults:
      run:
        shell: cmd
    timeout-minutes: 120

    steps:
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1.3

      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          cd ..
          git clone https://github.com/Nelson-numerical-software/nelson-thirdparty-x64.git
          cd nelson-thirdparty-x64
          install.bat
          cd ..

      - name: Build nelson-kernel
        run: |
          SET PATH=C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\current\Bin\;%PATH%
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          cd nelson-kernel
          msbuild NelSon.sln /p:Configuration=Release /p:Platform=x64 /target:"NelSon-cli" /m:4 /p:PreferredToolArchitecture=x64
