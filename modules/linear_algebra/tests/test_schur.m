%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
assert_isequal(nargin('schur'), 2);
assert_isequal(nargout('schur'), 2);
%=============================================================================
assert_isequal(schur([]), []);
[U, T] = schur([]);
assert_isequal(U, []);
assert_isequal(T, []);
%=============================================================================
assert_checkerror('schur(NaN)', _('Input argument must not contain NaN or Inf.'));
assert_checkerror('schur(Inf)', _('Input argument must not contain NaN or Inf.'));
%=============================================================================
assert_checkerror('schur(zeros(3,5))', _('Square matrix expected.'));
%=============================================================================
A = [0.            3+i         0.            0.            0.3-0.1i;
0.3-0.1i     0.            3+i         0.            0;
0.            0.3-0.1i     0.            3+i         0;
0.            0.            0.3-0.1i     0.            3+i;
3+i         0.            0.            0.3-0.1i     0];
T = schur(A);
T_REF = [3.3000+0.9000i  -0.0000-0.0000i   0.0000-0.0000i   0.0000+0.0000i   0.0000+0.0000i;
0.0000+0.0000i   2.0659-2.2897i  -0.0000+0.0000i  -0.0000-0.0000i   0.0000-0.0000i;
0.0000+0.0000i   0.0000+0.0000i  -0.0264+2.8460i   0.0000-0.0000i  -0.0000-0.0000i;
0.0000+0.0000i   0.0000+0.0000i   0.0000+0.0000i  -3.3163+0.8589i  -0.0000-0.0000i;
0.0000+0.0000i   0.0000+0.0000i   0.0000+0.0000i   0.0000+0.0000i  -2.0232-2.3151i];
assert_isapprox(T, T_REF, 1e-4);
%=============================================================================
[U, T] = schur(-3);
assert_isequal(U, 1);
assert_isequal(T, -3);
%=============================================================================
[U, T] = schur(-3i);
assert_isequal(U, 1);
assert_isequal(T, -3i);
%=============================================================================
